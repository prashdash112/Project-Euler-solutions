'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over 500 divisors?
'''
arr=[]
arr1=[]
arr2=[]
def triangle_no(n):
	add=(n*(n+1))/2
	return(int(add))


for i in range(1,3001): # 3000 triangle nos
	arr.append(triangle_no(i))   #triangle no array 


# method to print the divisors 
def div_len(no) : #divisor length 
    for i in range(no):
    	x=(len([i for i in range(1,no+1) if not no % i]))
    return(x)      #printing the no of divisors of a particular no


def compute():
	for q in arr:
		if(div_len(q)>=500):    #over 500 divisors 
			print(q,div_len(q))

if __name__=="__main__":
	print(compute())
	print(arr)

